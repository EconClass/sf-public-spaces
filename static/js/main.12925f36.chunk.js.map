{"version":3,"sources":["PageHeader.js","Project.js","PageContent.js","PageFooter.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","className","Project","image","title","link","src","width","height","href","PageContent","PageFooter","props","year","Date","getFullYear","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qUAaeA,MAVf,WACE,OACE,yBAAKC,UAAU,cACb,gCACE,wBAAIA,UAAU,cAAd,uB,MCMOC,MAVf,YAA0C,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,KAC/B,OACE,yBAAKJ,UAAU,WACb,yBAAKK,IAAKH,EAAOI,MAAM,MAAMC,OAAO,QACpC,4BAAKJ,GACL,uBAAGK,KAAMJ,GAAT,qB,MCSSK,MAbf,WACE,OACE,yBAAKT,UAAU,eACb,kBAAC,EAAD,CAASG,MAAM,cAAcD,MAAM,wBAAwBE,KAAK,MAChE,kBAAC,EAAD,CAASD,MAAM,gBAAgBD,MAAM,wBAAwBE,KAAK,MAClE,kBAAC,EAAD,CAASD,MAAM,iBAAiBD,MAAM,wBAAwBE,KAAK,MACnE,kBAAC,EAAD,CAASD,MAAM,cAAcD,MAAM,wBAAwBE,KAAK,MAChE,kBAAC,EAAD,CAASD,MAAM,gBAAgBD,MAAM,wBAAwBE,KAAK,MAClE,kBAAC,EAAD,CAASD,MAAM,cAAcD,MAAM,wBAAwBE,KAAK,Q,MCAvDM,MATf,SAAoBC,GAClB,IAAMC,GAAO,IAAIC,MAAOC,cACxB,OACE,yBAAKd,UAAU,cAAf,6BAC6BY,I,MCUlBG,MAVf,WACE,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.12925f36.chunk.js","sourcesContent":["import React from 'react'\nimport './PageHeader.css'\n\nfunction PageHeader() {\n  return (\n    <div className=\"PageHeader\">\n      <header>\n        <h1 className=\"page-title\">SF Public Spaces</h1>\n      </header>\n    </div>\n  )\n}\n\nexport default PageHeader","import React from 'react'\nimport './Project.css'\n\nfunction Project({ image, title, link }) {\n  return (\n    <div className=\"Project\">\n      <img src={image} width=\"300\" height=\"200\" />\n      <h3>{title}</h3>\n      <a href={link}>Link to project</a>\n    </div>\n  ) \n}\n\nexport default Project","import React from 'react'\nimport Project from './Project'\nimport './PageContent.css'\n\nfunction PageContent() {\n  return (\n    <div className=\"PageContent\">\n      <Project title=\"Tetris Dots\" image=\"/images/kitten-0.jpeg\" link=\"#\" />\n      <Project title=\"Zombie Server\" image=\"/images/kitten-1.jpeg\" link=\"#\" />\n      <Project title=\"Amazing Colors\" image=\"/images/kitten-2.jpeg\" link=\"#\" />\n      <Project title=\"Flip Toggle\" image=\"/images/kitten-3.jpeg\" link=\"#\" />\n      <Project title=\"121 Second St\" image=\"/images/kitten-4.jpeg\" link=\"#\" />\n      <Project title=\"Slide Shows\" image=\"/images/kitten-5.jpeg\" link=\"#\" />\n    </div>\n  )\n}\n\nexport default PageContent","import React from 'react'\nimport './PageFooter.css'\n\nfunction PageFooter(props) {\n  const year = new Date().getFullYear()\n  return (\n    <div className=\"PageFooter\">\n      Mitchell Hudson copyright {year}\n    </div>\n  )\n} \n\nexport default PageFooter","import React from 'react';\nimport PageHeader from './PageHeader'\nimport PageContent from './PageContent'\nimport PageFooter from './PageFooter'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PageHeader />\n      <PageContent />\n      <PageFooter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}